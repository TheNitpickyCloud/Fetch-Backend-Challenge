1. I chose NodeJS as a runtime environment as it provided an easy way to initialize and execute JavaScript. It is also actively developed, supports a large number of libraries, and has an active community, which can be helpful if I want to expand this project in the future. I chose Express to serve API requests as it is a very mature and easy-to-use library. I chose jest for testing due to its simplicity and robustness. 

2. I currently use an array to store the transactions. This ensures O(1) time complexity add requests, but in a spend request, I have to first sort the array according to the timestamp and then subtract the points, having O(nlog(n)) time complexity. This favors having more add requests than spend requests. If we use a min heap to store the transactions where the oldest transaction is on the top, the add requests will have O(log(n)) time complexity but the spend requests will have O(n) time complexity as we no longer have to perform an array sort as the heap is already sorted. This will make add requests slower than an array-based solution, but spend requests will be faster.

3. My favorite project so far has been my Turing Machine Simulator. It was my first time using academic sources to understand a concept and implement it in a programming language. Not just implement it, but visualize it by making a simulator for it. Making a simulator involved making the backend algorithms interact with the frontend website, which was exciting and challenging at the same time. I had to make sure all the data was in sync, and I learnt a lot about organizing projects and having a clear distinction between the backend and the frontend. 